/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

declare const _SWIG_enum_tag: unique symbol;

export  class MediaServer {

 static Initialize(): void;

 static Terminate(): void;

 static EnableLog(flag: boolean): void;

 static EnableDebug(flag: boolean): void;

 static EnableUltraDebug(flag: boolean): void;

 static SetCertificate(cert: string, key: string): boolean;

 static GetFingerprint(): string;

 static SetPortRange(minPort: number, maxPort: number): boolean;

 static SetAffinity(cpu: number): boolean;

 static SetThreadName(name: string): boolean;

  constructor();
}

export  class ActiveSpeakerDetectorFacade {

  constructor(object: any);

  SetMinChangePeriod(minChangePeriod: number): void;

  SetMaxAccumulatedScore(maxAcummulatedScore: number): void;

  SetNoiseGatingThreshold(noiseGatingThreshold: any): void;

  SetMinActivationScore(minActivationScore: number): void;

  AddIncomingSourceGroup(incoming: any, id: number): void;

  RemoveIncomingSourceGroup(incoming: any): void;
}

export  class TimeService {
}

export  class EventLoop extends TimeService {

  Start(): boolean;

  Stop(): boolean;

  constructor();
}

export  class RTPIncomingMediaStream {

  GetMediaSSRC(): number;

  GetTimeService(): TimeService;

  Mute(muting: boolean): void;
}

export  class RTPIncomingMediaStreamShared {

  get(): RTPIncomingMediaStream;
}

export  class MediaFrameListener {
}

export  class MediaFrameListenerShared {

  get(): MediaFrameListener;
}

export  class MediaFrameProducer {

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class MediaFrameProducerShared {

  get(): MediaFrameProducer;
}

export type MediaFrameType = number & { readonly [_SWIG_enum_tag]: 'MediaFrameType'; };

export  class LayerInfo {

 static MaxLayerId: any;

  temporalLayerId: any;

  spatialLayerId: any;

  constructor();
}

export  class LayerSource extends LayerInfo {

  numPackets: number;

  totalBytes: number;

  bitrate: number;

  totalBitrate: number;

  active: boolean;

  targetBitrate: number;

  targetWidth: number;

  targetHeight: number;

  targetFps: number;

  constructor();
}

export  class LayerSources {

  size(): any;

  get(i: any): LayerSource;

  constructor();
}

export  class RTPSource {

  ssrc: number;

  extSeqNum: number;

  cycles: number;

  jitter: number;

  numPackets: number;

  numPacketsDelta: number;

  numRTCPPackets: number;

  totalBytes: number;

  totalRTCPBytes: number;

  bitrate: number;

  totalBitrate: number;

  clockrate: number;

  constructor();
}

export  class RTPOutgoingSource extends RTPSource {

  time: number;

  numFrames: number;

  numFramesDelta: number;

  lastTimestamp: number;

  lastSenderReport: number;

  lastSenderReportNTP: number;

  remb: number;

  reportCount: number;

  reportCountDelta: number;

  reportedLostCount: number;

  reportedLostCountDelta: number;

  reportedFractionLost: any;

  reportedJitter: number;

  rtt: number;

  constructor();
}

export  class RTPOutgoingSourceGroup {

  constructor(type: MediaFrameType, TimeService: TimeService | EventLoop);

  constructor(streamId: string, type: MediaFrameType, TimeService: TimeService | EventLoop);

  type: MediaFrameType;

  media: RTPOutgoingSource;

  rtx: RTPOutgoingSource;

  fec: RTPOutgoingSource;

  lastUpdated: number;

  Update(): void;

  Stop(): void;

  SetForcedPlayoutDelay(min: number, max: number): void;

  UpdateAsync(object: any): void;
}

export  class RTPOutgoingSourceGroupShared {

  constructor(type: MediaFrameType, TimeService: TimeService | EventLoop);

  constructor(streamId: string, type: MediaFrameType, TimeService: TimeService | EventLoop);

  get(): RTPOutgoingSourceGroup;
}

export  class RTPReceiver {

  SendPLI(ssrc: number): number;

  Reset(ssrc: number): number;
}

export  class RTPReceiverShared {

  get(): RTPReceiver;
}

export  class RTPSender {
}

export  class RTPSenderShared {

  get(): RTPSender;
}

export  class RTPStreamTransponderFacade {

  constructor(outgoing: RTPOutgoingSourceGroupShared, sender: RTPSenderShared, object: any);

  SetIncoming(incoming: RTPIncomingMediaStreamShared, receiver: RTPReceiverShared, smooth: boolean): void;

  ResetIncoming(): void;

  AppendH264ParameterSets(sprops: string): boolean;

  SelectLayer(spatialLayerId: number, temporalLayerId: number): void;

  Mute(muting: boolean): void;

  SetIntraOnlyForwarding(intraOnlyForwarding: boolean): void;

  Close(): void;
}

export  class ActiveSpeakerMultiplexerFacade {

  constructor(timeService: TimeService | EventLoop, object: any);

  SetMaxAccumulatedScore(maxAcummulatedScore: number): void;

  SetNoiseGatingThreshold(noiseGatingThreshold: any): void;

  SetMinActivationScore(minActivationScore: number): void;

  AddIncomingSourceGroup(incoming: RTPIncomingMediaStreamShared, id: number): void;

  RemoveIncomingSourceGroup(incoming: RTPIncomingMediaStreamShared): void;

  AddRTPStreamTransponder(transpoder: any | RTPStreamTransponderFacade, id: number): void;

  RemoveRTPStreamTransponder(transpoder: any | RTPStreamTransponderFacade): void;

  Stop(): void;
}

export  class RTPIncomingSource extends RTPSource {

  numFrames: number;

  numFramesDelta: number;

  lostPackets: number;

  lostPacketsDelta: number;

  lostPacketsMaxGap: number;

  lostPacketsGapCount: number;

  dropPackets: number;

  totalPacketsSinceLastSR: number;

  totalBytesSinceLastSR: number;

  minExtSeqNumSinceLastSR: number;

  lostPacketsSinceLastSR: number;

  lastReceivedSenderNTPTimestamp: number;

  lastReceivedSenderReport: number;

  lastReport: number;

  totalPLIs: number;

  totalNACKs: number;

  frameDelay: number;

  frameDelayMax: number;

  frameCaptureDelay: number;

  frameCaptureDelayMax: number;

  skew: number;

  drift: number;

  aggregatedLayers: boolean;

  width: number;

  height: number;

  targetBitrate: number;

  targetWidth: number;

  targetHeight: number;

  targetFps: number;

  layers(): LayerSources;

  constructor();
}

export  class RTPIncomingSourceGroup extends RTPIncomingMediaStream {

  constructor(type: MediaFrameType, TimeService: TimeService | EventLoop);

  rid: string;

  mid: string;

  rtt: number;

  type: MediaFrameType;

  media: RTPIncomingSource;

  rtx: RTPIncomingSource;

  remoteBitrateEstimation: number;

  lost: number;

  minWaitedTime: number;

  maxWaitedTime: number;

  avgWaitedTime: number;

  lastUpdated: number;

  codec: string;

  SetMaxWaitTime(maxWaitingTime: number): void;

  ResetMaxWaitTime(): void;

  Update(): void;

  Stop(): void;

  UpdateAsync(object: any): void;
}

export  class RTPIncomingSourceGroupShared {

  constructor(type: MediaFrameType, TimeService: TimeService | EventLoop);

  toRTPIncomingMediaStream(): RTPIncomingMediaStreamShared;

  get(): RTPIncomingSourceGroup;
}

export  class DTLSICETransportListener {

  constructor(object: any);
}

export  class DTLSICETransportListenerShared {

  constructor(object: any);

  get(): any;
}

export  class DTLSICETransport {

  SetListener(listener: DTLSICETransportListenerShared): void;

  Start(): void;

  Stop(): void;

  SetSRTPProtectionProfiles(profiles: string): void;

  SetRemoteProperties(properties: any): void;

  SetLocalProperties(properties: any): void;

  SendPLI(ssrc: number): number;

  Dump(filename: string, inbound: boolean, outbound: boolean, rtcp: boolean, rtpHeadersOnly: boolean): number;

  Dump(filename: string, inbound: boolean, outbound: boolean, rtcp: boolean): number;

  Dump(filename: string, inbound: boolean, outbound: boolean): number;

  Dump(filename: string, inbound: boolean): number;

  Dump(filename: string): number;

  Dump(dumper: any, inbound: boolean, outbound: boolean, rtcp: boolean, rtpHeadersOnly: boolean): number;

  Dump(dumper: any, inbound: boolean, outbound: boolean, rtcp: boolean): number;

  Dump(dumper: any, inbound: boolean, outbound: boolean): number;

  Dump(dumper: any, inbound: boolean): number;

  Dump(dumper: any): number;

  StopDump(): number;

  DumpBWEStats(filename: string): number;

  StopDumpBWEStats(): number;

  Reset(): void;

  ActivateRemoteCandidate(candidate: any, useCandidate: boolean, priority: number): void;

  SetRemoteCryptoDTLS(setup: string, hash: string, fingerprint: string): number;

  SetLocalSTUNCredentials(username: string, pwd: string): number;

  SetRemoteSTUNCredentials(username: string, pwd: string): number;

  AddOutgoingSourceGroup(group: RTPOutgoingSourceGroupShared): boolean;

  RemoveOutgoingSourceGroup(group: RTPOutgoingSourceGroupShared): boolean;

  AddIncomingSourceGroup(group: RTPIncomingSourceGroupShared): boolean;

  RemoveIncomingSourceGroup(group: RTPIncomingSourceGroupShared): boolean;

  SetBandwidthProbing(probe: boolean): void;

  SetMaxProbingBitrate(bitrate: number): void;

  SetProbingBitrateLimit(bitrate: number): void;

  EnableSenderSideEstimation(enabled: boolean): void;

  SetSenderSideEstimatorListener(listener: any): void;

  GetAvailableOutgoingBitrate(): number;

  GetEstimatedOutgoingBitrate(): number;

  GetTotalSentBitrate(): number;

  SetRemoteOverrideBWE(overrideBWE: boolean): void;

  SetRemoteOverrideBitrate(bitrate: number): void;

  GetRemoteUsername(): string;

  GetRemotePwd(): string;

  GetLocalUsername(): string;

  GetLocalPwd(): string;

  GetRTT(): number;

  GetTimeService(): TimeService;
}

export  class DTLSICETransportShared {

  toRTPSender(): RTPSenderShared;

  toRTPReceiver(): RTPReceiverShared;

  get(): DTLSICETransport;
}

export  class MediaFrameReader {

  GrabNextFrame(): void;
}

export  class MediaFrameReaderShared {

  constructor(object: any, intraOnly: boolean, minPeriod: number, onDemand: boolean);

  toMediaFrameListener(): MediaFrameListenerShared;

  get(): MediaFrameReader;
}

export  class MP4RecorderFacade extends MediaFrameListener {

  constructor(object: any);

  Create(filename: string): boolean;

  Record(waitVideo: boolean, disableHints: boolean): boolean;

  Stop(): boolean;

  Close(): boolean;

  SetTimeShiftDuration(duration: number): void;

  SetH264ParameterSets(sprops: string): boolean;

  Close(async: boolean): boolean;
}

export  class MP4RecorderFacadeShared {

  constructor(object: any);

  toMediaFrameListener(): MediaFrameListenerShared;

  get(): MP4RecorderFacade;
}

export abstract class UDPReader {

  Next(): number;

  GetUDPData(): any;

  GetUDPSize(): number;

  Seek(time: number): number;

  Rewind(): void;

  Close(): boolean;
}

export  class PCAPTransportEmulator {

  constructor();

  SetRemoteProperties(properties: any): void;

  AddIncomingSourceGroup(group: RTPIncomingSourceGroup): boolean;

  RemoveIncomingSourceGroup(group: RTPIncomingSourceGroup): boolean;

  Open(filename: string): boolean;

  SetReader(reader: UDPReader): boolean;

  Play(): boolean;

  Seek(time: number): number;

  Stop(): boolean;

  Close(): boolean;

  GetTimeService(): TimeService;
}

export  class PlayerFacade {

  constructor(object: any);

  GetAudioSource(): RTPIncomingSourceGroupShared;

  GetVideoSource(): RTPIncomingSourceGroupShared;

  Reset(): void;

  Open(filename: string): number;

  HasAudioTrack(): boolean;

  HasVideoTrack(): boolean;

  GetAudioCodec(): number;

  GetVideoCodec(): number;

  GetDuration(): number;

  GetVideoWidth(): number;

  GetVideoHeight(): number;

  GetVideoBitrate(): number;

  GetVideoFramerate(): number;

  Play(): number;

  PreSeek(time: number): number;

  Seek(time: number): number;

  Tell(): number;

  Stop(): number;

  Close(): number;
}

export  class Properties {

  SetProperty(key: string, intval: number): void;

  SetProperty(key: string, val: string): void;

  SetProperty(key: string, boolval: boolean): void;

  SetIntegerProperty(key: string, intval: number): void;

  SetStringProperty(key: string, val: string): void;

  SetBooleanProperty(key: string, boolval: boolean): void;

  constructor();
}

export  class RemoteRateEstimatorListener {
}

export  class RTPSessionFacade {

  constructor(media: MediaFrameType);

  Init(properties: Properties): number;

  SetLocalPort(recvPort: number): number;

  GetLocalPort(): number;

  SetRemotePort(ip: string, sendPort: number): number;

  GetOutgoingSourceGroup(): RTPOutgoingSourceGroupShared;

  GetIncomingSourceGroup(): RTPIncomingSourceGroupShared;

  End(): number;

  SendPLI(ssrc: number): number;

  Reset(ssrc: number): number;

  GetTimeService(): TimeService;
}

export  class RTPSessionFacadeShared {

  constructor(type: MediaFrameType);

  toRTPReceiver(): RTPReceiverShared;

  toRTPSender(): RTPSenderShared;

  get(): RTPSessionFacade;
}

export  class RTPIncomingMediaStreamMultiplexer extends RTPIncomingMediaStream {

  constructor(incomingMediaStream: RTPIncomingMediaStreamShared, TimeService: TimeService | EventLoop);

  Stop(): void;
}

export  class RTPIncomingMediaStreamMultiplexerShared {

  constructor(incomingMediaStream: RTPIncomingMediaStreamShared, TimeService: TimeService | EventLoop);

  toRTPIncomingMediaStream(): RTPIncomingMediaStreamShared;

  get(): RTPIncomingMediaStreamMultiplexer;
}

export  class RTPBundleTransportConnection {

  transport: DTLSICETransportShared;

  disableSTUNKeepAlive: boolean;

  iceRequestsSent: any;

  iceRequestsReceived: any;

  iceResponsesSent: any;

  iceResponsesReceived: any;
}

export  class RTPBundleTransportConnectionShared {

  get(): RTPBundleTransportConnection;
}

export  class RTPBundleTransport {

  constructor(packetPoolSize: number);

  Init(): number;

  Init(port: number): number;

  AddICETransport(username: string, properties: Properties): RTPBundleTransportConnectionShared;

  RestartICETransport(username: string, restarted: string, properties: Properties): boolean;

  RemoveICETransport(username: string): number;

  End(): number;

  GetLocalPort(): number;

  AddRemoteCandidate(username: string, ip: string, port: number): number;

  SetCandidateRawTxData(ip: string, port: number, selfAddr: number, dstLladdr: string): void;

  SetRawTx(ifindex: number, sndbuf: number, skipQdisc: boolean, selfLladdr: string, defaultSelfAddr: number, defaultDstLladdr: string, port: number): void;

  ClearRawTx(): void;

  SetAffinity(cpu: number): boolean;

  SetThreadName(name: string): boolean;

  SetPriority(priority: number): boolean;

  SetIceTimeout(timeout: number): void;

  GetTimeService(): TimeService;
}

export  class RTPIncomingMediaStreamDepacketizer extends MediaFrameProducer {

  constructor(incomingSource: RTPIncomingMediaStreamShared);

  Stop(): void;
}

export  class RTPIncomingMediaStreamDepacketizerShared {

  constructor(incomingSource: RTPIncomingMediaStreamShared);

  toMediaFrameProducer(): MediaFrameProducerShared;

  get(): RTPIncomingMediaStreamDepacketizer;
}

export  class SenderSideEstimatorListener extends RemoteRateEstimatorListener {

  constructor(object: any);
}

export  class SimulcastMediaFrameListener extends MediaFrameProducer {

  constructor(timeService: TimeService | EventLoop, ssrc: number, numLayers: number);

  SetNumLayers(numLayers: number): void;

  AttachTo(producer: MediaFrameProducerShared): void;

  Detach(producer: MediaFrameProducerShared): void;

  Stop(): void;

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class SimulcastMediaFrameListenerShared {

  constructor(timeService: TimeService | EventLoop, ssrc: number, numLayers: number);

  toMediaFrameListener(): MediaFrameListenerShared;

  toMediaFrameProducer(): MediaFrameProducerShared;

  get(): SimulcastMediaFrameListener;
}


